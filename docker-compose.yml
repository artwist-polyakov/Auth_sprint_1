version: '3'

services:
  nginx:
   container_name: nginx
   build: ./nginx
   volumes:
     - static_volume:/var/www/static
     - media_volume:/var/www/media
     - admin_volume:/var/www/static/admin
   depends_on:
     - movies
     - auth
     - admin
   ports:
     - "8000:80"
     - "443:443"

  admin:
    container_name: admin
    build: ./admin
    volumes:
      - admin_static:/var/www/static/admin
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      - postgres

  movies:
    container_name: movies
    build: ./movies
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      - postgres
      - elasticsearch-node1
      - elasticsearch-node2
      - redis
      - jaeger

  auth:
    container_name: auth
    build: ./auth
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - jaeger

  etl:
    container_name: etl
    build: ./etl
    env_file:
      - .env
    depends_on:
      - postgres
      - elasticsearch-node1
      - elasticsearch-node2
      - redis

  postgres:
    container_name: postgres
    image: postgres:${POSTGRES_VERSION}
    env_file:
      - .env
    volumes:
      - ./etl/core/postgres/:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"

  elasticsearch-node1:
    image: elasticsearch:${STACK_VERSION}
    container_name: elasticsearch-node1
    env_file:
      - .env
    environment:
      - node.name=elasticsearch-node1
      - discovery.seed_hosts=elasticsearch-node1,elasticsearch-node2
      - cluster.initial_master_nodes=elasticsearch-node1,elasticsearch-node2
      - cluster.name=${CLUSTER_NAME}
      - bootstrap.memory_lock=${MEMORY_LOCK}
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1

  elasticsearch-node2:
    image: elasticsearch:${STACK_VERSION}
    container_name: elasticsearch-node2
    env_file:
      - .env
    environment:
      - node.name=elasticsearch-node2
      - discovery.seed_hosts=elasticsearch-node1,elasticsearch-node2
      - cluster.initial_master_nodes=elasticsearch-node1,elasticsearch-node2
      - cluster.name=${CLUSTER_NAME}
      - bootstrap.memory_lock=${MEMORY_LOCK}
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=false
    depends_on:
      - elasticsearch-node1
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.0
    ports:
      - ${KAFKA_PORT_UI}:${KAFKA_PORT_UI}
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_NAME=kraft

  kafka:
    container_name: kafka
    image: bitnami/kafka:${KAFKA_VERSION}
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:${KAFKA_PORT_CONTROLLER}
      - KAFKA_KRAFT_CLUSTER_ID=${KAFKA_KRAFT_CLUSTER_ID}
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:${KAFKA_PORT_PLAINTEXT},CONTROLLER://:${KAFKA_PORT_CONTROLLER},EXTERNAL://:${KAFKA_PORT}
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:${KAFKA_PORT_PLAINTEXT},EXTERNAL://kafka:${KAFKA_PORT}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    volumes:
      - kafka_data:/bitnami/kafka

  zookeeper:
    image: zookeeper:${ZOOKEEPER_VERSION}
    container_name: zookeeper
    hostname: zookeeper

  clickhouse-node:
    image: clickhouse/clickhouse-server:${CLICKHOUSE_VERSION}
    container_name: clickhouse-node
    hostname: clickhouse-node
    ports:
      - ${CLICKHOUSE_HTTP_PORT}:${CLICKHOUSE_HTTP_PORT}
      - ${CLICKHOUSE_CLIENT_PORT}:${CLICKHOUSE_CLIENT_PORT}
    volumes:
      - ./ugc/data/node1:/etc/clickhouse-server
    env_file:
      - .env
    depends_on:
      - zookeeper

  redis:
    container_name: redis
    image: redis:latest
    volumes:
      - ./core/redis.conf:/redis.conf
    command: [ "redis-server", "/redis.conf" ]

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:${JAEGER_VERSION}
    ports:
      - ${JAEGER_PORTS_1}
      - ${JAEGER_PORTS_2}
    environment:
      - LOG_LEVEL=debug
    env_file:
      - .env

  ugc:
    container_name: ugc
    build: ./ugc
    ports:
      - ${FLASK_PORTS}
    env_file:
      - .env
    depends_on:
      - clickhouse-node
      - kafka

  locust:
    container_name: locust
    image: locustio/locust:master
    volumes:
      - ./locust:/locust
    env_file:
      - .env
    ports:
      - ${LOCUST_PORT}:${LOCUST_PORT}
    command: -f /locust/locustfile.py --master -H http://${LOCUST_HOST}:${LOCUST_PORT}

  locust-worker:
    container_name: locust-worker
    image: locustio/locust:master
    volumes:
      - ./locust:/locust
    env_file:
      - .env
    command: -f /locust/locustfile.py --worker --master-host ${LOCUST_HOST}

volumes:
    static_volume:
    media_volume:
    admin_volume:
    admin_static:
    elasticsearch_data:
    redis_data:
    postgres_data:
    kafka_data:
