version: '3'

services:

  nginx:
   container_name: nginx
   build: ./nginx
   volumes:
     - static_volume:/var/www/static
     - media_volume:/var/www/media
     - admin_volume:/var/www/static/admin
   depends_on:
     - movies
     - auth
     - admin
   ports:
     - "8000:80"
     - "443:443"


  admin:
    container_name: admin
    build: ./admin
    volumes:
      - admin_static:/var/www/static/admin
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      - postgres


  movies:
    container_name: movies
    build: ./movies
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      - postgres
      - elasticsearch-node1
      - elasticsearch-node2
      - redis
      - jaeger


  auth:
    container_name: auth
    build: ./auth
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - jaeger


  etl:
    container_name: etl
    build: ./etl
    env_file:
      - .env
    depends_on:
      - postgres
      - elasticsearch-node1
      - elasticsearch-node2
      - redis



  postgres:
    container_name: postgres
    image: postgres:${POSTGRES_VERSION}
    env_file:
      - .env
    volumes:
      - ./etl/core/postgres/:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"



  elasticsearch-node1:
    image: elasticsearch:${STACK_VERSION}
    container_name: elasticsearch-node1
    env_file:
      - .env
    environment:
      - node.name=elasticsearch-node1
      - discovery.seed_hosts=elasticsearch-node1,elasticsearch-node2
      - cluster.initial_master_nodes=elasticsearch-node1,elasticsearch-node2
      - cluster.name=${CLUSTER_NAME}
      - bootstrap.memory_lock=${MEMORY_LOCK}
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1


  elasticsearch-node2:
    image: elasticsearch:${STACK_VERSION}
    container_name: elasticsearch-node2
    env_file:
      - .env
    environment:
      - node.name=elasticsearch-node2
      - discovery.seed_hosts=elasticsearch-node1,elasticsearch-node2
      - cluster.initial_master_nodes=elasticsearch-node1,elasticsearch-node2
      - cluster.name=${CLUSTER_NAME}
      - bootstrap.memory_lock=${MEMORY_LOCK}
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=false
    depends_on:
      - elasticsearch-node1
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.0
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka-0:9092
      - KAFKA_CLUSTERS_0_NAME=kraft

  kafka-0:
    container_name: kafka-0
    image: bitnami/kafka:${KAFKA_VERSION}
    ports:
      - "9094:9094"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092,EXTERNAL://127.0.0.1:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT

    volumes:
      - kafka_0_data:/bitnami/kafka


  kafka-1:
    container_name: kafka-1
    image: bitnami/kafka:${KAFKA_VERSION}
    ports:
      - "9095:9095"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092,EXTERNAL://127.0.0.1:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT

    volumes:
      - kafka_1_data:/bitnami/kafka

  kafka-2:
    container_name: kafka-2
    image: bitnami/kafka:${KAFKA_VERSION}
    ports:
      - "9096:9096"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092,EXTERNAL://127.0.0.1:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    volumes:
      - kafka_2_data:/bitnami/kafka


  zookeeper:
    image: zookeeper:${ZOOKEEPER_VERSION}
    container_name: zookeeper
    hostname: zookeeper

  clickhouse-node1:
    image: clickhouse/clickhouse-server:${CLICKHOUSE_VERSION}
    container_name: clickhouse-node1
    hostname: clickhouse-node1
    ports:
      - ${CLICKHOUSE_NODE_1_PORT_1}:${CLICKHOUSE_PORT_1}
      - ${CLICKHOUSE_NODE_1_PORT_2}:${CLICKHOUSE_PORT_2}
    volumes:
      - ./ugc/data/node1:/etc/clickhouse-server
    depends_on:
      - zookeeper

  clickhouse-node2:
    image: clickhouse/clickhouse-server:${CLICKHOUSE_VERSION}
    container_name: clickhouse-node2
    hostname: clickhouse-node2
    ports:
      - ${CLICKHOUSE_NODE_2_PORT_1}:${CLICKHOUSE_PORT_1}
      - ${CLICKHOUSE_NODE_2_PORT_2}:${CLICKHOUSE_PORT_2}
    volumes:
      - ./ugc/data/node2:/etc/clickhouse-server
    depends_on:
      - zookeeper

  clickhouse-node3:
    image: clickhouse/clickhouse-server:${CLICKHOUSE_VERSION}
    container_name: clickhouse-node3
    hostname: clickhouse-node3
    ports:
      - ${CLICKHOUSE_NODE_3_PORT_1}:${CLICKHOUSE_PORT_1}
      - ${CLICKHOUSE_NODE_3_PORT_2}:${CLICKHOUSE_PORT_2}
    volumes:
      - ./ugc/data/node3:/etc/clickhouse-server
    depends_on:
      - zookeeper

  clickhouse-node4:
    image: clickhouse/clickhouse-server:${CLICKHOUSE_VERSION}
    container_name: clickhouse-node4
    hostname: clickhouse-node4
    ports:
      - ${CLICKHOUSE_NODE_4_PORT_1}:${CLICKHOUSE_PORT_1}
      - ${CLICKHOUSE_NODE_4_PORT_2}:${CLICKHOUSE_PORT_2}
    volumes:
      - ./ugc/data/node4:/etc/clickhouse-server
    depends_on:
      - zookeeper

  redis:
    container_name: redis
    image: redis:latest
    volumes:
      - ./auth/core/redis.conf:/redis.conf
    command: [ "redis-server", "/redis.conf" ]


  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:${JAEGER_VERSION}
    ports:
      - ${JAEGER_PORTS_1}
      - ${JAEGER_PORTS_2}
    environment:
      - LOG_LEVEL=debug
    env_file:
      - .env

volumes:
    static_volume:
    media_volume:
    admin_volume:
    admin_static:
    elasticsearch_data:
    redis_data:
    postgres_data:
    kafka_0_data:
    kafka_1_data:
    kafka_2_data: