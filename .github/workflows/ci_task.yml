name: Python application

on:
  push:
    branches: [ feature/205-cicd ]
  pull_request:
    branches: [ main, feature/205-cicd ]

jobs:
  build:

    runs-on: ubuntu-latest
    environment: ACTIONS

    strategy:
      matrix:
        python-version: [ '3.10.14', '3.11.9', '3.11.1' ]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version:  ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install flake8 flake8-html
        pip install -r auth/requirements.txt
        pip install -r etl_kafka/requirements.txt
        pip install -r movies/requirements.txt
        pip install -r ugc/requirements.txt

        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.env --exclude=.env.example
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=.env --exclude=.env.example
        # Generate HTML report
        flake8 . --format=html --htmldir=flake-report --exclude=.env,.env.example
        ls -lah flake-report/

    - name: Upload HTML report as artifact
      uses: actions/upload-artifact@v2
      with:
        name: flake8-report
        path: flake-report/

    - name: Telegram notification
      if: success()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.GROUP_ID }}
        token: ${{ secrets.TG_BOT_TOKEN }}
        message: "CI/CD pipeline has been completed successfully on Python ${{ matrix.python-version }}."