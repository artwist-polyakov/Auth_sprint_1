Задание на спринт UGC

Лайки и закладки:

— присваивание лайков фильмам. Один пользователь — один лайк. Лайк может оставить только зарегистрированный
— история просмотров. что считать просмотром?
— Закладки — пользователь может добавлять фильм в закладки
— события плеера — открытие, завершение просмотра, смена качества видео,  чтобы понимать где остановился просмотр (ислледовать как делают эту механику).


== Пользователи ==

Зарегистрированные и незарегистрированные

== ФУНКЦ ТРЕБОВАНИЯ == 

1. Не допустить к UGC незарегистрированного пользовтеля
2. Обрабатыать события просмотра фильмов и страниц от всех типов пользователей + action (k/v)
3. Зарегистрированные могут:

— лайкнуть / дизлайкнуть
— откомментировать
— добавить в / удалить из избранного

== НЕФУНКЦИОНАЛЬНЫЕ ТРЕБОВАНИЯ == 

Пиковый РПС 3000
Средний RPS 750

Время ответа 200мс

Доступность 99.9%


== АРХИТЕКТУРА ==


— Сервис 1: UGC-сервис на flask
Умеет проверять авторизован ли пользователь и его uuid.
Позволяет оставить комментарий (обзор), поставить лайк, добавить фильм по uuid в избранное.
Связан с кафкой через другой сервис 

— Сервис 2: Stat-сервис на flask
Умеет отправить информацию о каком-то событии в кафку.
Если умирает не приводит к тому, что сервис UGC стал недоступен

— Сервис 3: Кафка
Хранит очереди сообщений
Разделение очередей продумывает ответственный за кафку. Кажется что у нас могут быть события типа event и события типа view.

— Сервис 4: Скрипт etl между кафкой и clickhouse для записи событий
Умеет забрать событие и преобразовать его в запись в колоночной субд

— Сервис 5: скрипт etl между кафкой и кх для записи просмотров
Таких событий будет сильно больше чем событий сервиса 4. Поэтому предлагаю выделить его в отдельный поток.

Решения за 4-5 связано с решением разделения очередей в кафка.

— Сервис 6. Кликхаус для хранения данных аналитки.





?? должен ли лайк соответствовать лайку в базе ??

Требования к объёму данных
500 000+ пользователей;
500 000+ связанных аккаунтов;
1 000 000+ записей о входах в аккаунт.

посчитать по формуле

== НОВЫЙ МОДУЛЬ ==

Оркестратор статистики.


== Ручки сервиса UGC: == 

~ LIKES

— post like uuid
— delete like uuid
— is_liked uuid -> bool

~ COMMENTS

— post comment
— ?? delete comment

~ FAVORITES

— post fav
— delete fav
— is fav bool


== Ручки сервиса статистики ==

~ EVENT

post

~ VIEW URL

post

== Flask: ==

Сервис статистики на flask
для всех событий шлёт в кафку записи


Сервис UGC на flask:
умеет проверять авторизацию пользователя
два типа пользователей
проверка прав

flask (stat) -> kafka -> etl .py -> clickhouse


flask (UGC) -> ?? flask (stat) ?? -> kafka -> etl .py ->  clickhouse

services

... 




генератор запросов —> нагружает сервис статисткии



Flask (веб морда) -> кто-то лайкнул фильм -> обращение идёт на ручку во фласк

— лайк надо отправить в аналитику через кафку
— лайк надо в базе записать (постгрес movies-likes)


ВОПРОС НАСТАВНИКУ:

1. Правильно ли я понимаю, что наше задание на спринт можно схематично изобразить: 

kafka -> flask -> clickhouse
или
flask -> kafka -> flask -> clickhouse
или
fastapi (sprint 5) -> kafka -> flask -> clickhouse

2. Нужно ли реализоваться что-то, что будет нагружать kafka? Это должен быть какой-то тестовый генератор моковых данных, или же надо связать kafka в сервисами API? 



